{
    "docs": [
        {
            "location": "/",
            "text": "NewPkg.jl\n\n\nHelper to generate new julia packages.\n\n\nFor \nofficial\n information visit the \nNewPkg.jl package\n \nweb site and documentation\n.\n\n\nUsage\n\n\nconfig()\n\n\nconfig(force::Bool=false)\n\n\n\nInteractive configuration of the development environment.\n\n\nNewPkg.jl\n operations require \ngit\n minimum configuration that keeps user signature (user.name & user.email).\n\n\ngenerate(pkg, description)\n\n\ngenerate(pkg::AbstractString, description::AbstractString;\n            authors::Union{AbstractString, Array} = [],\n            authors_url::AbstractString           = \"\",\n            path::AbstractString                  = Pkg.Dir.path(),\n            github_name::AbstractString           = \"\",\n            github_ssh::Bool                      = true,\n            mkdocs::Bool                          = true\n        )\n\n\n\nGenerate a new package named \npkg\n with \nMIT \"Expat\" License\n.\nGenerate creates a git repo at \nPkg.dir(pkg)\n for the package with an initial file structure.\n\n\nArguments:\n\n\n\n\npkg\n - a name for the new julia package.\n\n\ndescription\n -  a short description of the new julia package.\n\n\n\n\nKeyword parameters:\n\n\n\n\nauthors\n - a string or array of author names, the final default value will be the \npackage GitRepo user.name\n.\n\n\nauthors_url\n - a webpage or email address related to the copyright or authors, the final default value will be\n\nhttps://github.com/package GitRepo user.name/\n. To skip it set it to \n\"NONE\"\n.\n\n\npath\n - a location where the package will be generated, the default location is \nPkg.dir()\n\n\ngithub_name\n - github organisation or user name, the final default value will be \npackage GitRepo user.name\n. To\nskip it set it to \n\"NONE\"\n. This is used to set any \npackage repo remote github url\n and any mkdocs: \nsite_url\n,\n\nrepo_url\n etc...\n\n\ngithub_ssh\n - if true sets the package repo remote github url to \nssh version\n otherwise the \nhttps\n, the default\nvalue is \ntrue\n.\n\n\nmkdocs\n - enables generation of a \nmkdocs.yml\n configuration file as well as an initial \n$pkg/docs\n folder, the\ndefault value is \ntrue\n.\n\nNote:\n initial \nsite_url\n, \nrepo_url\n ... are generated for github.",
            "title": "Home"
        },
        {
            "location": "/#newpkgjl",
            "text": "Helper to generate new julia packages.  For  official  information visit the  NewPkg.jl package   web site and documentation .",
            "title": "NewPkg.jl"
        },
        {
            "location": "/#usage",
            "text": "",
            "title": "Usage"
        },
        {
            "location": "/#config",
            "text": "config(force::Bool=false)  Interactive configuration of the development environment.  NewPkg.jl  operations require  git  minimum configuration that keeps user signature (user.name & user.email).",
            "title": "config()"
        },
        {
            "location": "/#generatepkg-description",
            "text": "generate(pkg::AbstractString, description::AbstractString;\n            authors::Union{AbstractString, Array} = [],\n            authors_url::AbstractString           = \"\",\n            path::AbstractString                  = Pkg.Dir.path(),\n            github_name::AbstractString           = \"\",\n            github_ssh::Bool                      = true,\n            mkdocs::Bool                          = true\n        )  Generate a new package named  pkg  with  MIT \"Expat\" License .\nGenerate creates a git repo at  Pkg.dir(pkg)  for the package with an initial file structure.  Arguments:   pkg  - a name for the new julia package.  description  -  a short description of the new julia package.   Keyword parameters:   authors  - a string or array of author names, the final default value will be the  package GitRepo user.name .  authors_url  - a webpage or email address related to the copyright or authors, the final default value will be https://github.com/package GitRepo user.name/ . To skip it set it to  \"NONE\" .  path  - a location where the package will be generated, the default location is  Pkg.dir()  github_name  - github organisation or user name, the final default value will be  package GitRepo user.name . To\nskip it set it to  \"NONE\" . This is used to set any  package repo remote github url  and any mkdocs:  site_url , repo_url  etc...  github_ssh  - if true sets the package repo remote github url to  ssh version  otherwise the  https , the default\nvalue is  true .  mkdocs  - enables generation of a  mkdocs.yml  configuration file as well as an initial  $pkg/docs  folder, the\ndefault value is  true . Note:  initial  site_url ,  repo_url  ... are generated for github.",
            "title": "generate(pkg, description)"
        },
        {
            "location": "/about/readme/",
            "text": "NewPkg.jl\n\n\nHelper to generate new julia packages.\n\n\nWeb Presence\n\n\n\n\nNewPkg.jl \nweb site and documentation\n\n\nNewPkg.jl \ngithub repository",
            "title": "Readme"
        },
        {
            "location": "/about/readme/#newpkgjl",
            "text": "Helper to generate new julia packages.",
            "title": "NewPkg.jl"
        },
        {
            "location": "/about/readme/#web-presence",
            "text": "NewPkg.jl  web site and documentation  NewPkg.jl  github repository",
            "title": "Web Presence"
        },
        {
            "location": "/about/license/",
            "text": "Copyrights & Licenses\n\n\nThe \nNewPkg.jl package\n is licensed under the MIT \"Expat\" License:\n\n\n\n\nCopyright (c) 2015 - 2015: \npeter1000\n. \u00a0 (\nhttps://github.com/peter1000/\n)\n\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated\ndocumentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the\nrights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to the following conditions:\n\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the\nSoftware.\n\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE\nWARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\nCOPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\nOTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\n\n\n\nLicenses for incorporated software\n\n\nThe \nNewPkg.jl package\n contains code derived from the following sources, which have their own licenses:\n\n\n\n\n\n\nPkgDev.jl\n\n\n\n\n[MIT] license. Copyright (c) 2009-2015: Jeff Bezanson, Stefan Karpinski, Viral B. Shah, and other contributors.\n\n\n\n\nThe \nNewPkg.j\n is forked from `PkgDev.jl commit 0f987b4 on 20151223.",
            "title": "License"
        },
        {
            "location": "/about/license/#copyrights-licenses",
            "text": "The  NewPkg.jl package  is licensed under the MIT \"Expat\" License:   Copyright (c) 2015 - 2015:  peter1000 . \u00a0 ( https://github.com/peter1000/ )  Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated\ndocumentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the\nrights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to the following conditions:  The above copyright notice and this permission notice shall be included in all copies or substantial portions of the\nSoftware.  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE\nWARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\nCOPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\nOTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.",
            "title": "Copyrights &amp; Licenses"
        },
        {
            "location": "/about/license/#licenses-for-incorporated-software",
            "text": "The  NewPkg.jl package  contains code derived from the following sources, which have their own licenses:    PkgDev.jl   [MIT] license. Copyright (c) 2009-2015: Jeff Bezanson, Stefan Karpinski, Viral B. Shah, and other contributors.   The  NewPkg.j  is forked from `PkgDev.jl commit 0f987b4 on 20151223.",
            "title": "Licenses for incorporated software"
        },
        {
            "location": "/about/changelog/",
            "text": "v0.1.0 (2015-12-24)\n\n\nSummary\n\n\nInitial release.\n\n\n\n\nP-Versioning Based On \nSemantic Versioning\n\n\nIMPORTANT DIFFERENCE\n to the \nSemantic Versioning 2.0.0\n \n\n\n\n\n\n\nA pre-release version MUST NOT be added.\n\n\n\n\n\n\nBuild metadata MUST comprise only ASCII alphanumerics [0-9A-Za-z] and MUST NOT contain any hyphen.\n\n\n\n\n\n\nPackage Versioning\n\n\n\n\n\n\nSoftware and related packages using this modified Semantic Versioning MUST declare a public API.\n This API could\n    be declared in the code itself or exist strictly in documentation. However it is done, it should be precise and\n    comprehensive.\n\n\n\n\n\n\nA normal version number MUST take the form X.Y.Z where X, Y, and Z are non-negative integers, and MUST NOT contain\n    leading zeroes. X is the major version, Y is the minor version, and Z is the patch version.\n    Each element MUST increase numerically. For instance: 1.9.0 -> 1.10.0 -> 1.11.0.\n\n\n\n\n\n\nOnce a versioned package has been released, the contents of that version MUST NOT be modified. Any modifications\n    MUST be released as a new version.\n\n\n\n\n\n\nMajor version zero (0.y.z) is for initial development. Anything may change at any time. The public API should not be\n    considered stable.\n\n\n\n\n\n\nVersion 1.0.0 defines the public API. The way in which the version number is incremented after this release is\n    dependent on this public API and how it changes.\n\n\n\n\n\n\nPatch version Z (x.y.Z | x > 0) MUST be incremented if only backwards compatible bug fixes are introduced. A bug fix\n    is defined as an internal change that fixes incorrect behavior.\n\n\n\n\n\n\nMinor version Y (x.Y.z | x > 0) MUST be incremented if new, backwards compatible functionality is introduced to the\n    public API. It MUST be incremented if any public API functionality is marked as deprecated. It MAY be incremented\n    if substantial new functionality or improvements are introduced within the private code. It MAY include patch level\n    changes. Patch version MUST be reset to 0 when minor version is incremented.\n\n\n\n\n\n\nMajor version X (X.y.z | X > 0) MUST be incremented if any backwards incompatible changes are introduced to the\n    public API. It MAY include minor and patch level changes. Patch and minor version MUST be reset to 0 when major\n    version is incremented.\n\n\n\n\n\n\nBuild metadata MAY be denoted by appending a plus sign and a series of dot separated identifiers immediately\n    following the patch version. Identifiers MUST comprise only ASCII alphanumerics [0-9A-Za-z] and MUST NOT contain\n    hyphen. Identifiers MUST NOT be empty. Build metadata SHOULD be ignored when determining version precedence. Thus\n    two versions that differ only in the build metadata, have the same precedence. \n\n    Examples: 1.0.0+001, 1.0.0+20130313144700, 1.0.0+exp.sha.5114f85, 1.0.7+r128.g4560914.\n\n\n\n\n\n\nWhat do I do if I accidentally release a backwards incompatible change as a minor version?\n\n\nAs soon as you realize that you've broken the Semantic Versioning spec, fix the problem and release a new minor\nversion that corrects the problem and restores backwards compatibility. Even under this circumstance, it is\nunacceptable to modify versioned releases. If it's appropriate, document the offending version and inform your\nusers of the problem so that they are aware of the offending version.\n\n\n\n\n\n\nHow should I handle deprecating functionality?\n\n\nDeprecating existing functionality is a normal part of software development and is often required to make forward\nprogress. When you deprecate part of your public API, you should do two things:\n\n\n\n\nupdate your documentation to let users know about the change,\n\n\nissue a new minor release with the deprecation in place. Before you completely remove the functionality in a new\n    major release there should be at least one minor release that contains the deprecation so that users can\n    smoothly transition to the new API.",
            "title": "Changelog"
        },
        {
            "location": "/about/changelog/#v010-2015-12-24",
            "text": "",
            "title": "v0.1.0 (2015-12-24)"
        },
        {
            "location": "/about/changelog/#summary",
            "text": "Initial release.",
            "title": "Summary"
        },
        {
            "location": "/about/changelog/#p-versioning-based-on-semantic-versioning",
            "text": "IMPORTANT DIFFERENCE  to the  Semantic Versioning 2.0.0      A pre-release version MUST NOT be added.    Build metadata MUST comprise only ASCII alphanumerics [0-9A-Za-z] and MUST NOT contain any hyphen.",
            "title": "P-Versioning Based On Semantic Versioning"
        },
        {
            "location": "/about/changelog/#package-versioning",
            "text": "Software and related packages using this modified Semantic Versioning MUST declare a public API.  This API could\n    be declared in the code itself or exist strictly in documentation. However it is done, it should be precise and\n    comprehensive.    A normal version number MUST take the form X.Y.Z where X, Y, and Z are non-negative integers, and MUST NOT contain\n    leading zeroes. X is the major version, Y is the minor version, and Z is the patch version.\n    Each element MUST increase numerically. For instance: 1.9.0 -> 1.10.0 -> 1.11.0.    Once a versioned package has been released, the contents of that version MUST NOT be modified. Any modifications\n    MUST be released as a new version.    Major version zero (0.y.z) is for initial development. Anything may change at any time. The public API should not be\n    considered stable.    Version 1.0.0 defines the public API. The way in which the version number is incremented after this release is\n    dependent on this public API and how it changes.    Patch version Z (x.y.Z | x > 0) MUST be incremented if only backwards compatible bug fixes are introduced. A bug fix\n    is defined as an internal change that fixes incorrect behavior.    Minor version Y (x.Y.z | x > 0) MUST be incremented if new, backwards compatible functionality is introduced to the\n    public API. It MUST be incremented if any public API functionality is marked as deprecated. It MAY be incremented\n    if substantial new functionality or improvements are introduced within the private code. It MAY include patch level\n    changes. Patch version MUST be reset to 0 when minor version is incremented.    Major version X (X.y.z | X > 0) MUST be incremented if any backwards incompatible changes are introduced to the\n    public API. It MAY include minor and patch level changes. Patch and minor version MUST be reset to 0 when major\n    version is incremented.    Build metadata MAY be denoted by appending a plus sign and a series of dot separated identifiers immediately\n    following the patch version. Identifiers MUST comprise only ASCII alphanumerics [0-9A-Za-z] and MUST NOT contain\n    hyphen. Identifiers MUST NOT be empty. Build metadata SHOULD be ignored when determining version precedence. Thus\n    two versions that differ only in the build metadata, have the same precedence.  \n    Examples: 1.0.0+001, 1.0.0+20130313144700, 1.0.0+exp.sha.5114f85, 1.0.7+r128.g4560914.    What do I do if I accidentally release a backwards incompatible change as a minor version?  As soon as you realize that you've broken the Semantic Versioning spec, fix the problem and release a new minor\nversion that corrects the problem and restores backwards compatibility. Even under this circumstance, it is\nunacceptable to modify versioned releases. If it's appropriate, document the offending version and inform your\nusers of the problem so that they are aware of the offending version.    How should I handle deprecating functionality?  Deprecating existing functionality is a normal part of software development and is often required to make forward\nprogress. When you deprecate part of your public API, you should do two things:   update your documentation to let users know about the change,  issue a new minor release with the deprecation in place. Before you completely remove the functionality in a new\n    major release there should be at least one minor release that contains the deprecation so that users can\n    smoothly transition to the new API.",
            "title": "Package Versioning"
        }
    ]
}